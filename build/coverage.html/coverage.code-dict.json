{"/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/test.js":"/* istanbul instrument in package npmtest_loopback_angular_admin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/lib.npmtest_loopback_angular_admin.js":"/* istanbul instrument in package npmtest_loopback_angular_admin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_loopback_angular_admin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_loopback_angular_admin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-loopback-angular-admin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_loopback_angular_admin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_loopback_angular_admin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_loopback_angular_admin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_loopback_angular_admin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_loopback_angular_admin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_loopback_angular_admin.__dirname + '/lib.npmtest_loopback_angular_admin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/node_modules/loopback-angular-admin/server/server.js":"'use strict';\n\nvar loopback = require('loopback');\nvar boot = require('loopback-boot');\nvar path = require('path');\nvar app = module.exports = loopback();\n\n// Set up the /favicon.ico\napp.use(loopback.favicon());\n\n// request pre-processing middleware\napp.use(loopback.compress());\n\n// -- Add your pre-processing middleware here --\n\nvar ds = loopback.createDataSource({\n    connector: require('loopback-component-storage'),\n    provider: 'filesystem',\n    root: path.join(__dirname, '../', 'storage')\n});\nvar container = ds.createModel('container');\n\napp.model(container);\n\n// boot scripts mount components like REST API\nboot(app, __dirname);\n\n// -- Mount static files here--\n// All static middleware should be registered at the end, as all requests\n// passing the static middleware are hitting the file system\n// Example:\n// app.use(loopback.static(path.resolve(__dirname', '../client')));\napp.use(loopback.static(path.resolve(__dirname, '../client/app')));\n\n// Requests that get this far won't be handled\n// by any middleware. Convert them into a 404 error\n// that will be handled later down the chain.\napp.use(loopback.urlNotFound());\n\n// The ultimate error handler.\napp.use(loopback.errorHandler());\n\napp.start = function() {\n  // start the web server\n  return app.listen(function() {\n    app.emit('started');\n    console.log('Web server listening at: %s', app.get('url'));\n  });\n};\n\n// start the server if `$ node server.js`\nif (require.main === module) {\n  app.start();\n}\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/node_modules/loopback-angular-admin/Gruntfile.js":"// Generated on 2014-07-31 using generator-angular 0.9.5\n'use strict';\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'client/test/spec/{,*/}*.js'\n// use this if you want to recursively match all subfolders:\n// 'client/test/spec/**/*.js'\n\nmodule.exports = function (grunt) {\n\n  // Load grunt tasks automatically\n  require('load-grunt-tasks')(grunt);\n\n  // Time how long tasks take. Can help when optimizing build times\n  require('time-grunt')(grunt);\n\n  // Configurable paths for the application\n  var appConfig = {\n    app: require('./bower.json').appPath || 'app',\n    dist: 'dist'\n  };\n\n  // Define the configuration for all the tasks\n  grunt.initConfig({\n\n    // Project settings\n    yeoman: appConfig,\n\n    // Watches files for changes and runs tasks based on the changed files\n    watch: {\n      bower: {\n        files: ['bower.json'],\n        tasks: ['wiredep']\n      },\n      js: {\n        files: ['<%= yeoman.app %>/scripts/{,*/}*.js'],\n        tasks: ['newer:jshint:all'],\n        options: {\n          livereload: '<%= connect.options.livereload %>'\n        }\n      },\n      jsTest: {\n      files: ['client/test/spec/{,*/}*.js'],\n        tasks: ['newer:jshint:test', 'karma']\n      },\n      styles: {\n        files: ['<%= yeoman.app %>/styles/{,*/}*.css'],\n        tasks: ['newer:copy:styles', 'autoprefixer']\n      },\n      gruntfile: {\n        files: ['Gruntfile.js']\n      },\n      livereload: {\n        options: {\n          livereload: '<%= connect.options.livereload %>'\n        },\n        files: [\n          '<%= yeoman.app %>/{,*/}*.html',\n          '.tmp/styles/{,*/}*.css',\n          '<%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'\n        ]\n      }\n    },\n\n    ngconstant: {\n      // Options for all targets\n      options: {\n        space: '  ',\n        wrap: '\"use strict\";\\n\\n {%= __ngModule %}',\n        name: 'config'\n      },\n      // Environment targets\n      development: {\n        options: {\n          dest: '<%= yeoman.app %>/scripts/config.js'\n        },\n        constants: {\n          ENV: {\n            name: 'development',\n            apiUrl: process.env.API_URL || 'http://0.0.0.0:3000/api'\n          }\n        }\n      },\n      production: {\n        options: {\n          dest: '<%= yeoman.dist %>/scripts/config.js'\n        },\n        constants: {\n          ENV: {\n            name: 'production',\n            apiUrl: '/api'\n          }\n        }\n      }\n    },\n\n    // The actual grunt server settings\n    connect: {\n      options: {\n        port: 9000,\n        // Change this to '0.0.0.0' to access the server from outside.\n        hostname: 'localhost',\n        livereload: 35729\n      },\n      livereload: {\n        options: {\n          open: true,\n          middleware: function (connect) {\n            return [\n              connect.static('.tmp'),\n              connect().use(\n                '/bower_components',\n                connect.static('./client/app/bower_components')\n              ),\n              connect.static(appConfig.app)\n            ];\n          }\n        }\n      },\n      test: {\n        options: {\n          port: 9001,\n          middleware: function (connect) {\n            return [\n              connect.static('.tmp'),\n              connect.static('test'),\n              connect().use(\n                '/bower_components',\n                connect.static('./client/app/bower_components')\n              ),\n              connect.static(appConfig.app)\n            ];\n          }\n        }\n      },\n      dist: {\n        options: {\n          open: true,\n          base: '<%= yeoman.dist %>'\n        }\n      }\n    },\n\n    // Make sure code styles are up to par and there are no obvious mistakes\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc',\n        reporter: require('jshint-stylish')\n      },\n      all: {\n        src: [\n          'Gruntfile.js',\n          '<%= yeoman.app %>/scripts/{,*/}*.js'\n        ]\n      },\n      test: {\n        options: {\n          jshintrc: 'client/test/.jshintrc'\n        },\n      src: ['client/test/spec/{,*/}*.js']\n      }\n    },\n\n    // Empties folders to start fresh\n    clean: {\n      dist: {\n        files: [{\n          dot: true,\n          src: [\n            '.tmp',\n            '<%= yeoman.dist %>/{,*/}*',\n            '!<%= yeoman.dist %>/.git*'\n          ]\n        }]\n      },\n      server: '.tmp'\n    },\n\n    // Add vendor prefixed styles\n    autoprefixer: {\n      options: {\n        browsers: ['last 1 version']\n      },\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.tmp/styles/',\n          src: '{,*/}*.css',\n          dest: '.tmp/styles/'\n        }]\n      }\n    },\n\n    // Automatically inject Bower components into the app\n    wiredep: {\n      app: {\n        src: ['<%= yeoman.app %>/index.html'],\n        ignorePath:  /\\.\\.\\//\n      }\n    },\n\n    // Renames files for browser caching purposes\n    filerev: {\n      dist: {\n        src: [\n          '<%= yeoman.dist %>/scripts/{,*/}*.js',\n          '<%= yeoman.dist %>/styles/{,*/}*.css',\n          '<%= yeoman.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}',\n          '<%= yeoman.dist %>/styles/fonts/*'\n        ]\n      }\n    },\n\n    // Reads HTML for usemin blocks to enable smart builds that automatically\n    // concat, minify and revision files. Creates configurations in memory so\n    // additional tasks can operate on them\n    useminPrepare: {\n      html: '<%= yeoman.app %>/index.html',\n      options: {\n        dest: '<%= yeoman.dist %>',\n        flow: {\n          html: {\n            steps: {\n              js: ['concat', 'uglifyjs'],\n              css: ['cssmin']\n            },\n            post: {}\n          }\n        }\n      }\n    },\n\n    // Performs rewrites based on filerev and the useminPrepare configuration\n    usemin: {\n      html: ['<%= yeoman.dist %>/{,*/}*.html'],\n      css: ['<%= yeoman.dist %>/styles/{,*/}*.css'],\n      options: {\n        assetsDirs: ['<%= yeoman.dist %>','<%= yeoman.dist %>/images']\n      }\n    },\n\n    // The following *-min tasks will produce minified files in the dist folder\n    // By default, your `index.html`'s <!-- Usemin block --> will take care of\n    // minification. These next options are pre-configured if you do not wish\n    // to use the Usemin blocks.\n    // cssmin: {\n    //   dist: {\n    //     files: {\n    //       '<%= yeoman.dist %>/styles/main.css': [\n    //         '.tmp/styles/{,*/}*.css'\n    //       ]\n    //     }\n    //   }\n    // },\n    // uglify: {\n    //   dist: {\n    //     files: {\n    //       '<%= yeoman.dist %>/scripts/scripts.js': [\n    //         '<%= yeoman.dist %>/scripts/scripts.js'\n    //       ]\n    //     }\n    //   }\n    // },\n    // concat: {\n    //   dist: {}\n    // },\n\n    imagemin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.app %>/images',\n          src: '{,*/}*.{png,jpg,jpeg,gif}',\n          dest: '<%= yeoman.dist %>/images'\n        }]\n      }\n    },\n\n    svgmin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.app %>/images',\n          src: '{,*/}*.svg',\n          dest: '<%= yeoman.dist %>/images'\n        }]\n      }\n    },\n\n    htmlmin: {\n      dist: {\n        options: {\n          collapseWhitespace: true,\n          conservativeCollapse: true,\n          collapseBooleanAttributes: true,\n          removeCommentsFromCDATA: true,\n          removeOptionalTags: true\n        },\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.dist %>',\n          src: ['*.html', 'views/{,*/}*.html'],\n          dest: '<%= yeoman.dist %>'\n        }]\n      }\n    },\n\n    // ngmin tries to make the code safe for minification automatically by\n    // using the Angular long form for dependency injection. It doesn't work on\n    // things like resolve or inject so those have to be done manually.\n    ngmin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.tmp/concat/scripts',\n          src: '*.js',\n          dest: '.tmp/concat/scripts'\n        }]\n      }\n    },\n\n    // Replace Google CDN references\n    cdnify: {\n      dist: {\n        html: ['<%= yeoman.dist %>/*.html']\n      }\n    },\n\n    // Copies remaining files to places other tasks can use\n    copy: {\n      dist: {\n        files: [{\n          expand: true,\n          dot: true,\n          cwd: '<%= yeoman.app %>',\n          dest: '<%= yeoman.dist %>',\n          src: [\n            '*.{ico,png,txt}',\n            '.htaccess',\n            '*.html',\n            'views/{,*/}*.html',\n            'images/{,*/}*.{webp}',\n            'fonts/*'\n          ]\n        }, {\n          expand: true,\n          cwd: '.tmp/images',\n          dest: '<%= yeoman.dist %>/images',\n          src: ['generated/*']\n        }, {\n          expand: true,\n          cwd: 'bower_components/bootstrap/dist',\n          src: 'fonts/*',\n          dest: '<%= yeoman.dist %>'\n        }]\n      },\n      styles: {\n        expand: true,\n        cwd: '<%= yeoman.app %>/styles',\n        dest: '.tmp/styles/',\n        src: '{,*/}*.css'\n      }\n    },\n\n    // Run some tasks in parallel to speed up the build process\n    concurrent: {\n      server: [\n        'copy:styles'\n      ],\n      test: [\n        'copy:styles'\n      ],\n      dist: [\n        'copy:styles',\n        'imagemin',\n        'svgmin'\n      ]\n    },\n\n    // Test settings\n    karma: {\n      unit: {\n        configFile: 'client/test/karma.conf.js',\n        singleRun: true\n      }\n    },\n    loopback_angular: {\n      services: {\n        options: {\n          input: 'server/server.js',\n          output: 'client/app/scripts/lb-services.js',\n          apiUrl: process.env.API_URL || '/api/'\n        }\n      }\n    },\n    docular: {\n      groups: [\n        {\n          groupTitle: 'LoopBack',\n          groupId: 'loopback',\n          sections: [\n            {\n              id: 'lbServices',\n              title: 'LoopBack Services',\n              scripts: [ 'client/app/scripts/lb-services.js' ]\n            }\n          ]\n        }\n      ]\n    }\n\n  });\n\n  // Load the plugin that provides the \"loopback-angular\" and \"grunt-docular\" tasks.\n  grunt.loadNpmTasks('grunt-loopback-angular');\n  grunt.loadNpmTasks('grunt-docular');\n\n\n  grunt.registerTask('serve', 'Compile then start a connect web server', function (target) {\n    if (target === 'dist') {\n      return grunt.task.run(['build', 'connect:dist:keepalive']);\n    }\n\n    grunt.task.run([\n      'clean:server',\n      'ngconstant:development',\n      'wiredep',\n      'concurrent:server',\n      'autoprefixer',\n      'connect:livereload',\n      'watch'\n    ]);\n  });\n\n  grunt.registerTask('server', 'DEPRECATED TASK. Use the \"serve\" task instead', function (target) {\n    grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');\n    grunt.task.run(['serve:' + target]);\n  });\n\n  grunt.registerTask('test', [\n    'clean:server',\n    'concurrent:test',\n    'autoprefixer',\n    'connect:test'\n\n  ]);\n\n  grunt.registerTask('build', [\n    'clean:dist',\n    'ngconstant:production',\n    'wiredep',\n    'useminPrepare',\n    'concurrent:dist',\n    'autoprefixer',\n    'concat',\n    'ngmin',\n    'copy:dist',\n    // 'cdnify',\n    'cssmin',\n    'uglify',\n    'filerev',\n    'usemin',\n    'htmlmin'\n  ]);\n\n  grunt.registerTask('default', [\n    'newer:jshint',\n    'test',\n    'ngconstant:development',\n    'loopback_angular',\n    'docular',\n    'build'\n  ]);\n\n  grunt.registerTask('loopback', [\n    'loopback_angular',\n    'docular'\n  ]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/node_modules/loopback-angular-admin/server/datasources.local.js":"var MONGODB_URL = process.env.MONGODB_URL || null;\n\nif(MONGODB_URL) {\n  module.exports = {\n    db: {\n      name: 'db',\n      connector: 'loopback-connector-mongodb',\n      url: MONGODB_URL\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/node_modules/loopback-angular-admin/common/models/page.js":"'use strict';\n\nvar Showdown = require('showdown');\n\nmodule.exports = function (Page) {\n\n  var converter = new Showdown.converter();\n\n  Page.html = function (id, cb) {\n    Page.findById(id, function (err, page) {\n      if (err) {\n        return cb(err);\n      }\n      var result = page;\n      result.html = converter.makeHtml(page.content);\n      cb(err, result);\n    });\n  };\n\n  Page.remoteMethod('html', {\n    accepts: {arg: 'id', type: 'string'},\n    returns: {arg: 'content', type: 'string'},\n    http: {path: '/html', verb: 'get'}\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/node_modules/loopback-angular-admin/server/boot/authentication.js":"'use strict';\n\nmodule.exports = function enableAuthentication(server) {\n  // enable authentication\n  server.enableAuth();\n};\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/node_modules/loopback-angular-admin/server/boot/explorer.js":"'use strict';\n\nmodule.exports = function mountLoopBackExplorer(server) {\n  var explorer;\n  try {\n    explorer = require('loopback-explorer');\n  } catch(err) {\n    console.log(\n      'Run `npm install loopback-explorer` to enable the LoopBack explorer'\n    );\n    return;\n  }\n\n  var restApiRoot = server.get('restApiRoot');\n\n  var explorerApp = explorer(server, { basePath: restApiRoot });\n  server.use('/explorer', explorerApp);\n  server.once('started', function() {\n    var baseUrl = server.get('url').replace(/\\/$/, '');\n    // express 4.x (loopback 2.x) uses `mountpath`\n    // express 3.x (loopback 1.x) uses `route`\n    var explorerPath = explorerApp.mountpath || explorerApp.route;\n    console.log('Browse your REST API at %s%s', baseUrl, explorerPath);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/node_modules/loopback-angular-admin/server/boot/init.js":"'use strict';\n\nmodule.exports = function(app) {\n\n  if (app.dataSources.db.name !== 'Memory' && !process.env.INITDB) {\n    return;\n  }\n\n  console.error('Started creating inital data.');\n\n  var User = app.models.User;\n  var Role = app.models.Role;\n  var RoleMapping = app.models.RoleMapping;\n\n\n  User.create({\n    email: 'admin@admin.com',\n    firstName: 'System',\n    lastName: 'Admin',\n    password: 'admin'\n  }, function(err, user) {\n\n    if (err) {\n      console.log('err', err);\n    }\n    console.log(user);\n\n    Role.create({\n      name: 'admin'\n    }, function(err, role) {\n      role.principals.create({\n        principalType: RoleMapping.USER,\n        principalId: user.id\n      });\n    });\n\n  });\n\n  User.create({\n    email: 'user@user.com',\n    firstName: 'App',\n    lastName: 'User',\n    password: 'user'\n  }, function(err, user) {\n\n    if (err) {\n      console.log('err', err);\n    }\n    console.log(user);\n\n    Role.create({\n      name: 'admin'\n    }, function(err, role) {\n      role.principals.create({\n        principalType: RoleMapping.USER,\n        principalId: user.id\n      });\n    });\n\n  });\n\n\n\n  var Category = app.models.Category;\n  var Product = app.models.Product;\n\n  Category.create({\n    name: 'General Products'\n  }, function(err, category) {\n    if (err) {\n      console.log('err', err);\n    }\n    Product.create({\n      name: 'Generic product',\n      categoryId: category.id\n    }, function(err, data) {\n      console.log(data);\n    });\n    Product.create({\n      name: 'Specific product',\n      categoryId: category.id\n    }, function(err, data) {\n      console.log(data);\n    });\n  });\n\n  var Setting = app.models.Setting;\n\n  Setting.create({\n    key: 'appName',\n    value: 'Loopback-Angular-Admin'\n  }, function(err, data) {\n    if (err) {\n      console.log('err', err);\n    }\n    console.log(data);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/node_modules/loopback-angular-admin/server/boot/rest-api.js":"'use strict';\n\nmodule.exports = function mountRestApi(server) {\n  var restApiRoot = server.get('restApiRoot');\n  server.use(restApiRoot, server.loopback.rest());\n};\n","/home/travis/build/npmtest/node-npmtest-loopback-angular-admin/node_modules/loopback-angular-admin/server/boot/root.js":"'use strict';\n\nmodule.exports = function(server) {\n  // Install a `/` route that returns server status\n  var router = server.loopback.Router();\n  router.get('/status', server.loopback.status());\n  server.use(router);\n};\n"}